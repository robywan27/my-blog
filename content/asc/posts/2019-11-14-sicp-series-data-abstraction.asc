{:title "SICP series - Data Abstraction"
 :layout :post
 :tags  ["SICP" "functional programming" "fundamentals"]}

The previous post link:ywan27.github.io/my-blog/posts/2019-11-14-sicp-series-procedural-abstraction/[Procedural Abstraction] dealt with the idea of creating procedures to capture patterns of computation and abstracting them away by suppressing the implementation details and giving them a name so taht it is possible to treat them as primitive elements of the language. The topic of this post tackles a complementary issue to that of procedure abstraction, specifically how to group together pieces of information or data into abstract structures. Even though the problems both sides of abstraction are complementary, it will turn out that they are actually interconnected and thus the distinction among them is blurred. In fact, the procedures to manipulate the elements of a data structure usually have an inherent structure that mimics the data structure. This is just a teaser, but I will come back on this more in detail later.


== Compound Data
It is sometimes handy if we can use data elements which differ from the basic primitives the language provides you. Therefore, there needs to be a way for us to define and use our own data structures, in particular compound data structures. So there needs to be a way to glue simple elements together to form a compound structure which can be treated as a unit piece of primitive data element as well as a way to pull the compound structure's constituent pieces apart. This compound structure should be treated as a single unit, which means that it should be possible to pass it as argument and return as a value. This leads to the concept of `closure`.

*closure*: _"the result obtained by creating a compound data structure can itself be treated as a primitive object and thus be input to the creation of another compound object"_

=== Pairs
Scheme provides a basic construct to glue things together, `cons` (constructor). `cons` is a procedure which takes two expressions as input, evaluates them and glues those values together to form a `pair`. In order to get those elements back from the pair Scheme provides the procedures `car` and `cdr` which return the first and second element respectively. We have defined a `contract`.
```
(cons <x-exp> <y-exp>) ==> <P>  ; constructor
(car <P>) ==> <x-val>           ; accessor
(cdr <P>) ==> <y-val>           ; accessor
(pred? <x>)                     ; predicate
  ==> #t if pred? evaluates to a pair, else #f
```
Furthermore, the contract can be extended to include `predicates` to check if a given data structure satisfies the contract or not.

To portrait an implementation of a contract, the most basic example we could think is that of a 2-D point.
```
(define (make-point x y)
  (cons x y))
(define (point-x p)
  (car p))
(define (point-y p)
  (cdr p))
(define (pair? p)
  (; check details))
```

=== Lists
Scheme provides another primitive way of gluing together elements, the `list`. A list is a data structure that can hold an arbitrary number of ordered items. It is in practice implemented under the hood as a sequence of pairs with the following properties:

* car-part of a pair in sequence - holds an item
* cdr-part of a pair in sequence - holds a pointer to the rest of the list
* empty-list nil - signals no more pairs or end of the list

Note that lists are closed under the operations of `cons`, `car` and `cdr`, and can thus be treated as primitives.

[.text-center]
.Lists in Scheme
image::../../img/scheme-lists.png[Scheme Lists]

