{:title "A brief overview of Haskell"
 :layout :post
 :tags  ["haskell" "functional pprogramming"]}


This post will provide a brief overview of the programming language Haskell. One reason why Haskell is an apt language to study the concepts of functional programming is that unlike most, it is a pure functional language. This means that Haskell code is free from side effects and imperative structures. As we will see briefly, the language puts at disposal a framework to deal with side effects, or else it would not be of practical use in the real world. This post will touch the topics covered in the book by Hutton footnoteref:[hutton, http://www.cs.nott.ac.uk/~pszgmh/pih.html] and the edX MOOC footnote:[https://www.edx.org/course/introduction-functional-programming-delftx-fp101x-0].




- table of contents FP concepts series (prog lang part A and maybe B, edx fp)
	- generic
		functions without any side effect
		recursion
		list comprehensions
		closures
		higher-order functions
		lazy eval, stream
	- statically typed
		pattern matching
		monads
			parsing
			IO
		types
			basic types, list/tuple/function types, overloaded types, polymorphic types, currying, type declarations, data types, type classes
	- dynamically typed
		macros